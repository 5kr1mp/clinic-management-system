/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.usep.clinic.management.system.gui.logbook;

import com.usep.clinic.management.system.AppConfig;
import com.usep.clinic.management.system.AppContext;
import com.usep.clinic.management.system.model.Log;
import com.usep.clinic.management.system.model.enums.Category;
import com.usep.clinic.management.system.service.LogService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
/**
 *
 * @author Hanz
 */
public class LogBookPanel extends javax.swing.JPanel {
    private LogService logService;
    /**
     * Creates new form java
     */
    public LogBookPanel() {
    initComponents();
    logService = LogService.getInstance();
        addListeners();
        loadLogs();

        jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });
}
   private void addListeners() {
    jButton2.addActionListener(evt -> jButton2ActionPerformed(evt));
    jButton1.addActionListener(evt -> jButton1ActionPerformed(evt));
    jTextField1.addActionListener(evt -> jTextField1ActionPerformed(evt));
}
    
    private void loadLogs() {
        try {
            ArrayList<Log> logs = logService.getLogs();
            updateTable(logs);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading logs: " + e.getMessage());
        }
    }

    
    private void updateTable(ArrayList<Log> logs) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (Log log : logs) {
            model.addRow(new Object[]{
                log.getPatientId(),
                log.getName(),
                log.getDesignation(),
                log.getReason(),
                log.getContact(),
                log.getDateTime().toLocalDate()
            });
        }
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Logs");
        jPanel1.add(jLabel1, java.awt.BorderLayout.WEST);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jTextField1.setPreferredSize(new java.awt.Dimension(150, 30));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel4.add(jTextField1);

        jButton1.setIcon(AppContext.SEARCH_ICON);
        jButton1.setPreferredSize(new java.awt.Dimension(30, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jPanel1.add(jPanel4, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Patient ID", "Name", "Designation", "Purpose", "Contact", "Date"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton2.setText("Add");
        jPanel3.add(jButton2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filter", "ID", "Category", "Date" }));
        jPanel3.add(jComboBox1);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String keyword = jTextField1.getText().trim();
        String filter = (String) jComboBox1.getSelectedItem();
        
        if (keyword.isEmpty() || filter.equals("Filter")) {
        loadLogs();
        return;
        }
        
        try {
            ArrayList<Log> filteredLogs = switch (filter) {
                case "ID" -> {
                    try {
                        yield logService.getLogsByPatientId(Integer.parseInt(keyword));
                    } catch (NumberFormatException e) {
                        throw new Exception("Invalid Patient ID format.");
                    }
                }
                case "Category" -> {
                    try {
                        Category category = Category.valueOf(keyword.toUpperCase());
                        yield logService.getLogsByCategory(category);
                    } catch (IllegalArgumentException e) {
                        throw new Exception("Invalid category. Use 'Faculty' or 'Student'.");
                    }
                }
                case "Date" -> logService.getLogsByDate(LocalDate.parse(keyword));
                default -> logService.getLogsByName(keyword);
            };

            updateTable(filteredLogs);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Search failed: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
    try {
        String idStr = JOptionPane.showInputDialog(this, "Enter ID:");
        if (idStr == null) return;
        int id = Integer.parseInt(idStr);

        String name = JOptionPane.showInputDialog(this, "Enter Name:");
        String designation = JOptionPane.showInputDialog(this, "Enter Designation:");
        String purpose = JOptionPane.showInputDialog(this, "Enter Reason:");
        String contact = JOptionPane.showInputDialog(this, "Enter Contact:");
        Category[] categories = Category.values();
        Category selectedCategory = (Category) JOptionPane.showInputDialog(
                this,
                "Select Category:",
                "Category",
                JOptionPane.QUESTION_MESSAGE,
                null,
                categories,
                categories[0]
        );

        if (name == null || designation == null || purpose == null || contact == null || selectedCategory == null)
            return;

        // Use 'id' as both log id and patient id (if needed)
        Log newLog = new Log(id, LocalDateTime.now(), purpose, id, name, designation, selectedCategory, contact);
        logService.add(newLog);

        JOptionPane.showMessageDialog(this, "Log added successfully.");
        loadLogs();
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid ID format. Please enter a number.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to add log: " + e.getMessage());
    }
}

    private void jTextField1ActionPerformed(ActionEvent evt) {
        jButton1ActionPerformed(evt);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

